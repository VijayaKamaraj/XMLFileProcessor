// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XMLWebApiCore.Models.DBClasses;

#nullable disable

namespace XMLWebApiCore.Migrations
{
    [DbContext(typeof(FileServiceContext))]
    [Migration("20220606090847_xmlFileProcessor")]
    partial class xmlFileProcessor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.DrawingDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Revision")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drawings");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.EquipmentDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrawingDBId")
                        .HasColumnType("int");

                    b.Property<double>("LocationX")
                        .HasColumnType("float");

                    b.Property<double>("LocationY")
                        .HasColumnType("float");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingDBId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.InstrumentComponentDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrawingDBId")
                        .HasColumnType("int");

                    b.Property<double>("LocationX")
                        .HasColumnType("float");

                    b.Property<double>("LocationY")
                        .HasColumnType("float");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("PersistentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingDBId");

                    b.ToTable("InstrumentComponents");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.IntermediateElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessLineId")
                        .HasColumnType("int");

                    b.Property<string>("intermediateElement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessLineId");

                    b.ToTable("IntermediateElements");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.NozzleDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentDBId")
                        .HasColumnType("int");

                    b.Property<double>("LocationX")
                        .HasColumnType("float");

                    b.Property<double>("LocationY")
                        .HasColumnType("float");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("PersistentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentDBId");

                    b.ToTable("Nozzles");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.PipeConnectorSymbolDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrossPageDrawingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrossPageLinkLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrawingDBId")
                        .HasColumnType("int");

                    b.Property<double>("LocationX")
                        .HasColumnType("float");

                    b.Property<double>("LocationY")
                        .HasColumnType("float");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("PersistentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingDBId");

                    b.ToTable("PipeConnectorSymbols");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.PipingNetworkSegmentDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<int>("PipingNetworkSystemDBId")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PipingNetworkSystemDBId");

                    b.ToTable("PipingNetworkSegments");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.PipingNetworkSystemDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrawingDBId")
                        .HasColumnType("int");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("PersistentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingDBId");

                    b.ToTable("PipingNetworkSystems");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.ProcessInstrumentDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrawingDBId")
                        .HasColumnType("int");

                    b.Property<double>("LocationX")
                        .HasColumnType("float");

                    b.Property<double>("LocationY")
                        .HasColumnType("float");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("PersistentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingDBId");

                    b.ToTable("ProcessInstruments");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.ProcessLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DrawingDBId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessLineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceEquipmentTagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceTagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetEquipmentTagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetTagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingDBId");

                    b.ToTable("ProcessLines");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.SignalLineDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComponentClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrawingDBId")
                        .HasColumnType("int");

                    b.Property<string>("FromID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxX")
                        .HasColumnType("float");

                    b.Property<double>("MaxY")
                        .HasColumnType("float");

                    b.Property<double>("MinX")
                        .HasColumnType("float");

                    b.Property<double>("MinY")
                        .HasColumnType("float");

                    b.Property<string>("PersistentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingDBId");

                    b.ToTable("SignalLines");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.EquipmentDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.DrawingDB", null)
                        .WithMany("Equipments")
                        .HasForeignKey("DrawingDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.InstrumentComponentDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.DrawingDB", null)
                        .WithMany("InstrumentComponents")
                        .HasForeignKey("DrawingDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.IntermediateElement", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.ProcessLine", null)
                        .WithMany("IntermediateElements")
                        .HasForeignKey("ProcessLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.NozzleDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.EquipmentDB", null)
                        .WithMany("Nozzles")
                        .HasForeignKey("EquipmentDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.PipeConnectorSymbolDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.DrawingDB", null)
                        .WithMany("PipeConnectorSymbols")
                        .HasForeignKey("DrawingDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.PipingNetworkSegmentDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.PipingNetworkSystemDB", null)
                        .WithMany("PipingNetworkSegments")
                        .HasForeignKey("PipingNetworkSystemDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.PipingNetworkSystemDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.DrawingDB", null)
                        .WithMany("PipingNetworkSystems")
                        .HasForeignKey("DrawingDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.ProcessInstrumentDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.DrawingDB", null)
                        .WithMany("ProcessInstruments")
                        .HasForeignKey("DrawingDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.ProcessLine", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.DrawingDB", null)
                        .WithMany("ProcessLines")
                        .HasForeignKey("DrawingDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.SignalLineDB", b =>
                {
                    b.HasOne("XMLWebApiCore.Models.DBClasses.DrawingDB", null)
                        .WithMany("SignalLines")
                        .HasForeignKey("DrawingDBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.DrawingDB", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("InstrumentComponents");

                    b.Navigation("PipeConnectorSymbols");

                    b.Navigation("PipingNetworkSystems");

                    b.Navigation("ProcessInstruments");

                    b.Navigation("ProcessLines");

                    b.Navigation("SignalLines");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.EquipmentDB", b =>
                {
                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.PipingNetworkSystemDB", b =>
                {
                    b.Navigation("PipingNetworkSegments");
                });

            modelBuilder.Entity("XMLWebApiCore.Models.DBClasses.ProcessLine", b =>
                {
                    b.Navigation("IntermediateElements");
                });
#pragma warning restore 612, 618
        }
    }
}
